syntax = "proto3";

package slackbot;

// Service running on the main processing server
// The gateway is the CLIENT of this service.
service Processor {
  // Sends a message to be processed asynchronously.
  // This is a "fire-and-forget" call from the gateway's perspective.
  rpc ProcessMessage(ProcessRequest) returns (ProcessResponse);
}

message ProcessRequest {
  string text = 1;
  string channel = 2;
  string ts = 3;      // Original message timestamp
  string thread_ts = 4; // Thread to reply in
  string user = 5;
}

// An empty response to acknowledge receipt of the processing request.
message ProcessResponse {}


// Service running on the HTTP Gateway
// The processing server is the CLIENT of this service.
service Notifier {
  // Sends the final reply back to the gateway to be posted on Slack.
  rpc PostReply(ReplyRequest) returns (ReplyResponse);
}

message ReplyRequest {
  string channel = 1;
  string thread_ts = 2;
  string text = 3;
}

// A response to acknowledge if the message was posted successfully.
message ReplyResponse {
  bool ok = 1;
}


// python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. slackbot.proto