# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import slackbot_pb2 as slackbot__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in slackbot_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ProcessorStub(object):
    """Service running on the main processing server
    The gateway is the CLIENT of this service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessMessage = channel.unary_unary(
                '/slackbot.Processor/ProcessMessage',
                request_serializer=slackbot__pb2.ProcessRequest.SerializeToString,
                response_deserializer=slackbot__pb2.ProcessResponse.FromString,
                _registered_method=True)


class ProcessorServicer(object):
    """Service running on the main processing server
    The gateway is the CLIENT of this service.
    """

    def ProcessMessage(self, request, context):
        """Sends a message to be processed asynchronously.
        This is a "fire-and-forget" call from the gateway's perspective.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProcessorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessMessage,
                    request_deserializer=slackbot__pb2.ProcessRequest.FromString,
                    response_serializer=slackbot__pb2.ProcessResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'slackbot.Processor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('slackbot.Processor', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Processor(object):
    """Service running on the main processing server
    The gateway is the CLIENT of this service.
    """

    @staticmethod
    def ProcessMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slackbot.Processor/ProcessMessage',
            slackbot__pb2.ProcessRequest.SerializeToString,
            slackbot__pb2.ProcessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class NotifierStub(object):
    """Service running on the HTTP Gateway
    The processing server is the CLIENT of this service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PostReply = channel.unary_unary(
                '/slackbot.Notifier/PostReply',
                request_serializer=slackbot__pb2.ReplyRequest.SerializeToString,
                response_deserializer=slackbot__pb2.ReplyResponse.FromString,
                _registered_method=True)


class NotifierServicer(object):
    """Service running on the HTTP Gateway
    The processing server is the CLIENT of this service.
    """

    def PostReply(self, request, context):
        """Sends the final reply back to the gateway to be posted on Slack.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NotifierServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PostReply': grpc.unary_unary_rpc_method_handler(
                    servicer.PostReply,
                    request_deserializer=slackbot__pb2.ReplyRequest.FromString,
                    response_serializer=slackbot__pb2.ReplyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'slackbot.Notifier', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('slackbot.Notifier', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Notifier(object):
    """Service running on the HTTP Gateway
    The processing server is the CLIENT of this service.
    """

    @staticmethod
    def PostReply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/slackbot.Notifier/PostReply',
            slackbot__pb2.ReplyRequest.SerializeToString,
            slackbot__pb2.ReplyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
